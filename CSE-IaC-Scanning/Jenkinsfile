@Library(['cicd-util-library']) _


pipeline {
    agent {
        node ('cicd-agent-02')
    }
    triggers {
        cron('0 22 * * 7')
    }   
    stages {
        stage('Clean Workspace') {
            steps {
                deleteDir()
            }
        }
        stage('checkout') {
            steps {
                script {
                    checkout ([$class: 'GitSCM', branches: [[name: "${branch}"]],userRemoteConfigs: [[credentialsId: 'github', url: "https://github.aetna.com/CloudSecurityservice/CSE-IaC-Scanning.git"]]])
                    echo "Github branch is ${branch}"
                }
            }
        }
        stage('Lifecycle Analysis') {
            steps {
                script {
                    
                    nexus.evaluatePolicy(domain: 'CSE-IaC-Scanning', application: 'CSE-IaC-Scanning')
                }
            }
        }        
        stage('Security Analysis w/Checkmarx') {
            steps {
                script {
                    checkmarx(
                        domain: 'CSE-IaC-Scanning',
                        application: 'CSE-IaC-Scanning',
                        team: 'Retail',
                        excludeFolders: '.git,build,etc,lib,work,RemoteSystemsTempFiles,.scannerwork'
                    )
            emailext attachmentsPattern: '**/CxSASTReport*.pdf	', body: 'CSE-IaC-Scanning Checkmarx Scan Report', subject: 'CSE-IaC-Scanning Checkmarx Scan Report', recipientProviders: [developers(), requestor()], to: "CSE@CVSHealth.com"
                }
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                script {
                    scannerHome = tool 'SonarQube Scanner'                
                    }
                withSonarQubeEnv('CICD Sonarqube') {
                sh "${scannerHome}/bin/sonar-scanner -X -Dsonar.projectKey=css-cse-IaC-Scanning -Dsonar.projectName=css-cse-IaC-Scanning -Dsonar.projectVersion=1.0 -Dsonar.sources=. -Dsonar.java.binaries=build -Dsonar.junit.reportPaths=build/test-results -Dsonar.scm.provider=git"
                }
            }    
        }           
    }
post {
    always {
        emailext attachLog: true,
            body: "Pipeline ${currentBuild.fullDisplayName} is with status ${currentBuild.currentResult}",
            from: 'no-reply@cicd-jenkinsmaster-01',
            replyTo: 'anusha.thumala2@cvshealth.com',
            subject: "JENKINS DEPLOYMENT ${BUILD_NUMBER}, branch ${branch}",
            to: "anusha.thumala2@cvshealth.com",
            recipientProviders: [requestor(), culprits()]
        }
    }
}
